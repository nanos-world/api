{
	"name": "Console",
	"description": "Exposes access to registering Console Commands and Logging messages.",
	"authority": "both",
	"static_functions": [
		{
			"name": "Log",
			"description": "Logs and formats a message in the console",
			"description_long": "Logs and formats a message in the console, with formatted arguments",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "message",
					"description": "Message to print"
				},
				{
					"type": "any",
					"name": "args...",
					"default": "nil",
					"description": "Other arguments to format with the message using string.format"
				}
			],
			"examples": [
				{
					"title": "Basic",
					"content": "Console.Log(\"Hello, world!\")",
					"output": "Hello, world!"
				},
				{
					"title": "With formatting (string)",
					"content": [
						"local player_name = \"John\"",
						"Console.Log(\"Hello %s!\", player_name)"
					],
					"output": "Hello John!"
				},
				{
					"title": "With formatting (integer)",
					"content": [
						"local health = 50",
						"local max_health = 100",
						"Console.Log(\"Player health: %d/%d\", health, max_health)"
					],
					"output": "Player health: 50/100"
				}
			]
		},
		{
			"name": "Warn",
			"description": "Logs an orange warning in the console with stack information",
			"description_long": "Logs an orange warning in the console with stack information, with formatted arguments",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "message",
					"description": "Message to print"
				},
				{
					"type": "any",
					"name": "args...",
					"default": "nil",
					"description": "Other arguments to format with the message using string.format"
				}
			]
		},
		{
			"name": "Error",
			"description": "Logs a red error in the console with stack information",
			"description_long": "Logs a red error in the console with stack information, with formatted arguments",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "message",
					"description": "Message to print"
				},
				{
					"type": "any",
					"name": "args...",
					"default": "nil",
					"description": "Other arguments to format with the message using string.format"
				}
			]
		},
		{
			"name": "RegisterCommand",
			"description": "Registers a new Console Command",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "command",
					"description": "The command"
				},
				{
					"type": "function",
					"name": "callback",
					"description": "The callback to be called when the command is inputted",
					"function_parameters": [
						{
							"name": "params",
							"type": "any..."
						}
					]
				},
				{
					"type": "string",
					"name": "description",
					"description": "The command description to display in the console"
				},
				{
					"type": "string[]",
					"name": "parameters",
					"description": "The list of supported parameters to display in the console"
				}
			],
			"examples": [
				{
					"title": "Registering to a command that sends a message to everyone",
					"content": [
						"Console.RegisterCommand(\"hello\", function(text)",
						"    Console.Log(\"Sending a 'Hello %s' to everyone!\", text)",
						"    Chat.BroadcastMessage(\"Hello \" .. text)",
						"end, \"says a message to everyone\", { \"my_text\" })"
					]
				}
			]
		},
		{
			"name": "RunCommand",
			"description": "Runs a Console Command programmatically",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "command",
					"description": "The command"
				}
			],
			"examples": [
				{
					"title": "Running a Console Command",
					"content": "Console.RunCommand(\"hello\")"
				}
			]
		}
	],
	"events" : [
		{
			"name": "PlayerSubmit",
			"description": "Called when a console command is submitted",
			"authority": "both",
			"arguments": [
				{
					"type": "string",
					"name": "text",
					"description": "Text submitted"
				}
			],
			"examples": [
				{
					"title": "Handles Console Inputs",
					"content": [
						"if (text == \"some_text\") then",
						"    Console.Log(\"Player submitted some_text!\")",
						"end"
					]
				}
			]
		},
		{
			"name": "LogEntry",
			"description": "Called when a log is received",
			"authority": "both",
			"arguments": [
				{
					"type": "string",
					"name": "text",
					"description": "Log Message"
				},
				{
					"type": "LogType",
					"name": "type",
					"description": "Type of the log"
				}
			]
		},
		{
			"name": "Open",
			"description": "When player opens the Console",
			"authority": "client"
		},
		{
			"name": "Close",
			"description": "When player closes the Console",
			"authority": "client"
		}
	]
}