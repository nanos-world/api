{
	"name": "Vehicle",
	"description": "Base class for all Vehicle entities.",
	"is_base": true,
	"functions": [
		{
			"authority": "both",
			"name": "AddSkeletalMeshAttached",
			"description": "Attaches a Skeletal Mesh as master pose to this entity",
			"description_long": "Spawns and attaches a SkeletalMesh to this Pickable, the SkeletalMesh must have the same skeleton used by this Actor's mesh, and will follow all animations from it. Uses a custom ID to be used for removing/customizing it afterwards",
			"parameters": [
				{
					"type": "string",
					"name": "id",
					"description": "Used further for removing or applying material settings on it"
				},
				{
					"type": "SkeletalMeshPath",
					"name": "skeletal_mesh_path",
					"description": "Path to SkeletalMesh asset to attach"
				},
				{
					"type": "boolean",
					"name": "use_parent_bounds",
					"description": "If true, this component uses its parents bounds when attached. This can be a significant optimization with many components attached together",
					"default": "true"
				}
			],
			"relations": {
				"functions": [
					"RemoveSkeletalMeshAttached"
				]
			}
		},
		{
			"authority": "both",
			"name": "AddStaticMeshAttached",
			"description": "Attaches a Static Mesh to this entity",
			"description_long": "Spawns and attaches a StaticMesh to this Pickable in a Socket with a relative location and rotation. Uses a custom ID to be used for removing/customizing it afterwards",
			"parameters": [
				{
					"type": "string",
					"name": "id",
					"description": "Unique ID to assign to the StaticMesh"
				},
				{
					"type": "StaticMeshPath",
					"name": "static_mesh_path",
					"description": "Path to StaticMesh asset to attach"
				},
				{
					"type": "string",
					"name": "socket",
					"default": "",
					"description": "Bone socket to attach to"
				},
				{
					"type": "Vector",
					"name": "relative_location",
					"default": "Vector(0, 0, 0)",
					"description": "Relative location"
				},
				{
					"type": "Rotator",
					"name": "relative_rotation",
					"default": "Rotator(0, 0, 0)",
					"description": "Relative rotation"
				},
				{
					"type": "boolean",
					"name": "use_parent_bounds",
					"description": "If true, this component uses its parents bounds when attached. This can be a significant optimization with many components attached together",
					"default": "true"
				}
			],
			"relations": {
				"functions": [
					"SetStaticMeshAttachedTransform",
					"RemoveStaticMeshAttached"
				]
			}
		},
		{
			"authority": "both",
			"name": "GetAllStaticMeshAttached",
			"description": "Gets all Static Meshes attached to this entity",
			"return": [
				{
					"type": "string[]",
					"description": "the key as the Attached ID, and the value as the Asset Path"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetAllSkeletalMeshAttached",
			"description": "Gets all Skeletal Meshes attached to this entity",
			"return": [
				{
					"type": "string[]",
					"description": "the key as the Attached ID, and the value as the Asset Path"
				}
			]
		},
		{
			"authority": "both",
			"name": "RemoveSkeletalMeshAttached",
			"description": "Removes, if it exists, a SkeletalMesh from this Pickable given its custom ID",
			"parameters": [
				{
					"type": "string",
					"name": "id",
					"description": "Unique ID of the SkeletalMesh to remove"
				}
			],
			"relations": {
				"functions": [
					"AddSkeletalMeshAttached"
				]
			}
		},
		{
			"authority": "both",
			"name": "SetStaticMeshAttachedTransform",
			"description": "Sets a Static Mesh Attached location and rotation",
			"parameters": [
				{
					"type": "string",
					"name": "id",
					"description": "Unique ID of the StaticMesh set with AddStaticMeshAttached"
				},
				{
					"type": "Vector",
					"name": "relative_location",
					"description": "New relative location"
				},
				{
					"type": "Rotator",
					"name": "relative_rotation",
					"description": "New relative rotation"
				}
			],
			"relations": {
				"functions": [
					"AddStaticMeshAttached"
				]
			}
		},
		{
			"authority": "both",
			"name": "RemoveStaticMeshAttached",
			"description": "Removes, if it exists, a StaticMesh from this Pickable given its custom ID",
			"parameters": [
				{
					"type": "string",
					"name": "id",
					"description": "Unique ID of the StaticMesh to remove"
				}
			],
			"relations": {
				"functions": [
					"AddStaticMeshAttached"
				]
			}
		},
		{
			"authority": "both",
			"name": "RemoveAllStaticMeshesAttached",
			"description": "Removes all StaticMeshes attached"
		},
		{
			"authority": "both",
			"name": "RemoveAllSkeletalMeshesAttached",
			"description": "Removes all SkeletalMeshes attached"
		},
		{
			"authority": "server",
			"name": "SetDoor",
			"description": "Adds a Door to the Vehicle",
			"description_long": "Adds a Door at offset_location from root which will pose the Character at seat_location with seat_rotation rotation.",
			"parameters": [
				{
					"type": "integer",
					"name": "seat_index"
				},
				{
					"type": "Vector",
					"name": "offset_location"
				},
				{
					"type": "Vector",
					"name": "seat_location"
				},
				{
					"type": "Rotator",
					"name": "seat_rotation"
				},
				{
					"type": "integer",
					"name": "trigger_radius"
				},
				{
					"type": "integer",
					"name": "leave_lateral_offset",
					"description": "It's where the Character will be ejected when leaving it (e.g. -150 for left door or 150 for right door)"
				}
			]
		},
		{
			"authority": "both",
			"name": "PlayAnimation",
			"description": "Plays an Animation on this Vehicle",
			"parameters": [
				{
					"type": "AnimationPath",
					"name": "animation_path"
				},
				{
					"type": "string",
					"name": "slot_name",
					"default": "DefaultSlot"
				},
				{
					"type": "boolean",
					"name": "loop_indefinitely",
					"default": "false",
					"description": "This parameter is only used if the Vehicle has an Animation Blueprint"
				},
				{
					"type": "float",
					"name": "blend_in_time",
					"default": "0.25",
					"description": "This parameter is only used if the Vehicle has an Animation Blueprint"
				},
				{
					"type": "float",
					"name": "blend_out_time",
					"default": "0.25",
					"description": "This parameter is only used if the Vehicle has an Animation Blueprint"
				},
				{
					"type": "float",
					"name": "play_rate",
					"default": "1.0",
					"description": "This parameter is only used if the Vehicle has an Animation Blueprint"
				},
				{
					"type": "boolean",
					"name": "stop_all_montages",
					"default": "false",
					"description": "Stops all running Montages from the same Group. This parameter is only used if the Vehicle has an Animation Blueprint"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetMesh",
			"description": "Gets the Asset name",
			"return": [
				{
					"type": "SkeletalMeshPath",
					"description": "asset path",
					"name": "asset"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetDoors",
			"description": "Gets all configured Doors",
			"return": [
				{
					"type": "table",
					"table_properties": [
						{
							"name": "seat_index",
							"type": "integer"
						},
						{
							"name": "offset_location",
							"type": "Vector"
						},
						{
							"name": "seat_location",
							"type": "Vector"
						},
						{
							"name": "seat_rotation",
							"type": "Rotator"
						},
						{
							"name": "leave_lateral_offset",
							"type": "integer"
						},
						{
							"name": "sphere_radius",
							"type": "integer"
						}
					]
				}
			]
		},
		{
			"authority": "both",
			"name": "GetPassenger",
			"description": "Gets a passenger from a seat",
			"parameters": [
				{
					"type": "integer",
					"name": "seat"
				}
			],
			"return": [
				{
					"type": "Character",
					"description": "or nil if no passenger in seat",
					"name": "passenger"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetPassengers",
			"description": "Gets all passengers",
			"return": [
				{
					"type": "Character[]",
					"name": "passengers"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetExplosionSettings",
			"description": "Configures the Explosion Settings when health reaches zero",
			"parameters": [
				{
					"type": "Vector",
					"name": "engine_relative_location",
					"description": "Relative location of the Engine. Used to apply particles and effects."
				},
				{
					"type": "table",
					"name": "materials_index_burnt_override",
					"description": "List of material indexes to override to burnt when exploded. Leave it empty for all indexes."
				},
				{
					"type": "table",
					"name": "materials_index_burnt_invisible",
					"description": "List of material indexes to override to invisible when exploded. Leave it empty for all indexes."
				}
			],
			"examples": [
				{
					"title": "Vehicle Explosion Settings",
					"content": "my_vehicle:SetExplosionSettings(Vector(-50, 0, 0), { 1, 2, 4 }, { 3 })"
				}
			]
		}
	],
	"events": [
		{
			"name": "Hit",
			"description": "Triggered when Vehicle hits something",
			"authority": "both",
			"arguments": [
				{
					"type": "Vehicle",
					"name": "self"
				},
				{
					"type": "integer",
					"name": "impact_force",
					"description": "The intensity of the Hit normalized by the Vehicle's weight"
				},
				{
					"type": "Vector",
					"name": "normal_impulse",
					"description": "The impulse direction it hits"
				},
				{
					"type": "Vector",
					"name": "impact_location",
					"description": "The world 3D location of the impact"
				},
				{
					"type": "Vector",
					"name": "velocity",
					"description": "The Vehicle velocity at the moment it hits"
				}
			]
		},
		{
			"name": "CharacterEnter",
			"description": "Triggered when a Character fully enters the Vehicle",
			"authority": "both",
			"arguments": [
				{
					"type": "Vehicle",
					"name": "self"
				},
				{
					"type": "Character",
					"name": "character"
				},
				{
					"type": "integer",
					"name": "seat",
					"description": "The seat index"
				}
			]
		},
		{
			"name": "CharacterLeave",
			"description": "Triggered when a Character fully leaves the Vehicle",
			"authority": "both",
			"arguments": [
				{
					"type": "Vehicle",
					"name": "self"
				},
				{
					"type": "Character",
					"name": "character"
				}
			]
		},
		{
			"name": "CharacterAttemptEnter",
			"description": "Triggered when a Character attempts to enter the Vehicle",
			"authority": "server",
			"arguments": [
				{
					"type": "Vehicle",
					"name": "self"
				},
				{
					"type": "Character",
					"name": "character"
				},
				{
					"type": "integer",
					"name": "seat",
					"description": "The seat index"
				}
			],
			"return": [
				{
					"type": "boolean",
					"description": "Return false to prevent it"
				}
			]
		},
		{
			"name": "CharacterAttemptLeave",
			"description": "Triggered when a Character attempts to leave the Vehicle",
			"authority": "server",
			"arguments": [
				{
					"type": "Vehicle",
					"name": "self"
				},
				{
					"type": "Character",
					"name": "character"
				}
			],
			"return": [
				{
					"type": "boolean",
					"description": "Return false to prevent it"
				}
			]
		},
		{
			"name": "TakeDamage",
			"authority": "server",
			"description": "Triggered when this Vehicle takes damage",
			"arguments": [
				{
					"type": "Vehicle",
					"name": "self"
				},
				{
					"type": "integer",
					"name": "damage"
				},
				{
					"type": "string",
					"name": "bone",
					"description": "Damaged bone"
				},
				{
					"type": "DamageType",
					"name": "type",
					"description": "Damage Type"
				},
				{
					"type": "Vector",
					"name": "from_direction",
					"description": "Direction of the damage relative to the damaged actor"
				},
				{
					"type": "Player",
					"name": "instigator",
					"description": "The player which caused the damage"
				},
				{
					"type": "any",
					"name": "causer",
					"description": "The object which caused the damage"
				}
			],
			"return": [
				{
					"type": "boolean",
					"description": "Return <code>false</code> to cancel the damage (will still display animations, particles and apply impact forces)"
				}
			]
		}
	]
}