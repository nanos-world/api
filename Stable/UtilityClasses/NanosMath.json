{
	"name": "NanosMath",
	"description": "A table containing useful and aux Math functions.",
	"static_functions": [
		{
			"name": "Round",
			"description": "Rounds a number",
			"return": [
				{
					"type": "number",
					"description": "the rounded number"
				}
			],
			"parameters": [
				{
					"type": "number",
					"name": "value",
					"description": "The number to be rounded"
				}
			]
		},
		{
			"name": "Clamp",
			"description": "Clamps a number",
			"return": [
				{
					"type": "number",
					"description": "the number clamped"
				}
			],
			"parameters": [
				{
					"type": "number",
					"name": "value",
					"description": "The number to be clamped"
				},
				{
					"type": "number",
					"name": "min",
					"description": "The min value"
				},
				{
					"type": "number",
					"name": "max",
					"description": "The max value"
				}
			]
		},
		{
			"name": "ClampAxis",
			"description": "Clamps an angle to the range of [0, 360]",
			"return": [
				{
					"type": "number",
					"description": "the number clamped"
				}
			],
			"parameters": [
				{
					"type": "number",
					"name": "value",
					"description": "The number to be clamped"
				}
			],
			"examples": [
				{
					"title": "Clamping an angle",
					"content": "local axis = NanosMath.ClampAxis(720)"
				}
			]
		},
		{
			"name": "NormalizeAxis",
			"description": "Clamps an angle to the range of [-180, 180]",
			"return": [
				{
					"type": "number",
					"description": "the number clamped"
				}
			],
			"parameters": [
				{
					"type": "number",
					"name": "value",
					"description": "The number to be clamped"
				}
			]
		},
		{
			"name": "RelativeTo",
			"description": "Calculates the location and rotation relative to an actor",
			"return": [
				{
					"type": "Vector",
					"description": "the location relative to the actor"
				},
				{
					"type": "Rotator",
					"description": "the rotation relative to the actor"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "location",
					"description": "The location of the new system"
				},
				{
					"type": "Rotator",
					"name": "rotation",
					"description": "The rotation of the new system"
				},
				{
					"type": "Actor",
					"name": "actor",
					"description": "The actor to be translated to the new system"
				}
			]
		},
		{
			"name": "LocalToWorld",
			"description": "Converts a local location and rotation to world coordinates based on an actor's transform",
			"description_long": "Takes a local position and rotation relative to an actor, applies the actor's location, rotation, and scale to compute world-space location and rotation.",
			"return": [
				{
					"type": "Vector",
					"description": "the location in world coordinates"
				},
				{
					"type": "Rotator",
					"description": "the rotation in world coordinates"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "local_location",
					"description": "The local location to convert"
				},
				{
					"type": "Rotator",
					"name": "local_rotation",
					"description": "The local rotation to convert"
				},
				{
					"type": "Actor",
					"name": "actor",
					"description": "The actor whose transform defines the local space"
				}
			]
		},
		{
			"name": "RandomFloat",
			"description": "Returns a random float value",
			"return": [
				{
					"type": "float",
					"description": "the random value"
				}
			],
			"parameters": [
				{
					"type": "float",
					"name": "min",
					"description": "Minimum value"
				},
				{
					"type": "float",
					"name": "max",
					"description": "Maximum value"
				}
			]
		},
		{
			"name": "FInterpTo",
			"description": "Interpolate number from Current to Target",
			"return": [
				{
					"type": "number"
				}
			],
			"parameters": [
				{
					"type": "number",
					"name": "current"
				},
				{
					"type": "number",
					"name": "target"
				},
				{
					"type": "number",
					"name": "delta_time"
				},
				{
					"type": "number",
					"name": "interp_speed"
				}
			],
			"examples": [
				{
					"title": "Interpolating a number until it reaches 100 with speed 3",
					"content": [
						"local my_value = 0",
						"Client.Subscribe(\"Tick\", function(delta_time)",
						"    my_value = NanosMath.FInterpTo(my_value, 100, delta_time, 3)",
						"end)"
					]
				}
			]
		},
		{
			"name": "RInterpTo",
			"description": "Interpolate Rotator from Current to Target",
			"return": [
				{
					"type": "Rotator"
				}
			],
			"parameters": [
				{
					"type": "Rotator",
					"name": "current"
				},
				{
					"type": "Rotator",
					"name": "target"
				},
				{
					"type": "number",
					"name": "delta_time"
				},
				{
					"type": "number",
					"name": "interp_speed"
				}
			]
		},
		{
			"name": "RInterpConstantTo",
			"description": "Interpolate Rotator from Current to Target with a constant step",
			"return": [
				{
					"type": "Rotator"
				}
			],
			"parameters": [
				{
					"type": "Rotator",
					"name": "current"
				},
				{
					"type": "Rotator",
					"name": "target"
				},
				{
					"type": "number",
					"name": "delta_time"
				},
				{
					"type": "number",
					"name": "interp_speed"
				}
			]
		},
		{
			"name": "VInterpTo",
			"description": "Interpolate Vector from Current to Target",
			"return": [
				{
					"type": "Vector"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "current"
				},
				{
					"type": "Vector",
					"name": "target"
				},
				{
					"type": "number",
					"name": "delta_time"
				},
				{
					"type": "number",
					"name": "interp_speed"
				}
			],
			"examples": [
				{
					"title": "Interpolating a Vector until it reaches Vector(1000, 200, 100) with speed 5",
					"content": [
						"local my_value = Vector(0, 0, 0)",
						"Client.Subscribe(\"Tick\", function(delta_time)",
						"    my_value = NanosMath.VInterpTo(my_value, Vector(1000, 200, 100), delta_time, 5)",
						"end)"
					]
				}
			]
		},
		{
			"name": "VInterpConstantTo",
			"description": "Interpolate Vector from Current to Target with a constant step",
			"return": [
				{
					"type": "Vector"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "current"
				},
				{
					"type": "Vector",
					"name": "target"
				},
				{
					"type": "number",
					"name": "delta_time"
				},
				{
					"type": "number",
					"name": "interp_speed"
				}
			]
		}
	]
}
