{
	"name": "Character",
	"description": "Characters represents Actors which can be possessed, can move and interact with world. They are the default Skeletal Mesh Character built for nanos world.",
	"authority": "server",
	"inheritance": [
		"Actor",
		"Paintable"
	],
	"constructor": [
		{
			"type": "Vector",
			"name": "location",
			"default": "Vector(0, 0, 0)"
		},
		{
			"type": "Rotator",
			"name": "rotation",
			"default": "Rotator(0, 0, 0)"
		},
		{
			"type": "SkeletalMeshPath",
			"name": "skeletal_mesh",
			"default": "nanos-world::SK_Mannequin"
		},
		{
			"type": "CollisionType",
			"name": "collision_type",
			"default": "CollisionType.Normal"
		},
		{
			"type": "boolean",
			"name": "gravity_enabled",
			"default": "true"
		},
		{
			"type": "number",
			"name": "max_health",
			"default": "100",
			"description": "Current / Max Health"
		},
		{
			"type": "SoundPath",
			"name": "death_sound",
			"default": "nanos-world::A_Male_01_Death",
			"description": "Played when Character dies"
		},
		{
			"type": "SoundPath",
			"name": "pain_sound",
			"default": "nanos-world::A_Male_01_Pain",
			"description": "Played when Character takes damage"
		}
	],
	"functions": [
		{
			"authority": "server",
			"name": "ApplyDamage",
			"return": [
				{
					"type": "number",
					"description": "the damage applied"
				}
			],
			"description": "Do damage to a character",
			"description_long": "Do damage to a character, will trigger all related events and apply modified damage based on bone. Also will apply impulse if it's a heavy explosion",
			"parameters": [
				{
					"type": "number",
					"name": "damage"
				},
				{
					"type": "string",
					"name": "bone_name",
					"default": ""
				},
				{
					"type": "DamageType",
					"name": "damage_type",
					"default": "DamageType.Shot"
				},
				{
					"type": "Vector",
					"name": "from_direction",
					"default": "Vector(0, 0, 0)"
				},
				{
					"type": "Player",
					"name": "instigator",
					"default": "nil",
					"description": "The player which caused the damage"
				},
				{
					"type": "any",
					"name": "causer",
					"default": "nil",
					"description": "The object which caused the damage"
				}
			]
		},
		{
			"authority": "both",
			"name": "AddSkeletalMeshAttached",
			"description": "Spawns and Attaches a SkeletalMesh into this Character",
			"description_long": "Spawns and Attaches a SkeletalMesh into this Character, the SkeletalMesh must have the same Skeletal used by the Character Mesh, and will follow all animations from it. Uses a custom ID to be used for removing it further.<br/><br/>For customizing the Materials specific of a SkeletalMeshAttached, please use the following syntax in the Paintable methods: <code>attachable///[ATTACHABLE_ID]/[PARAMETER_NAME]</code>, where [ATTACHABLE_ID] is the ID of the Attachable, and [PARAMETER_NAME] is the name of the parameter you want to change.",
			"parameters": [
				{
					"type": "string",
					"name": "id",
					"description": "Used further for removing or applying material settings on it"
				},
				{
					"type": "SkeletalMeshPath",
					"name": "skeletal_mesh_asset",
					"default": ""
				}
			]
		},
		{
			"authority": "both",
			"name": "AddStaticMeshAttached",
			"description": "Spawns and Attaches a StaticMesh into this Character",
			"description_long": "Spawns and Attaches a StaticMesh into this Character in a Socket with relative Location and Rotation. Uses a custom ID to be used for removing it further<br/><br/>For customizing the Materials specific of a StaticMeshAttached, please use the following syntax as the <code>parameter_name</codein the Paintable methods: <code>attachable///[ATTACHABLE_ID]/[PARAMETER_NAME]</code>, where [ATTACHABLE_ID] is the ID of the Attachable, and [PARAMETER_NAME] is the name of the parameter you want to change.",
			"parameters": [
				{
					"type": "string",
					"name": "id",
					"description": "Used further for removing or applying material settings on it"
				},
				{
					"type": "StaticMeshPath",
					"name": "static_mesh_asset",
					"default": ""
				},
				{
					"type": "string",
					"name": "socket",
					"default": ""
				},
				{
					"type": "Vector",
					"name": "relative_location",
					"default": "Vector(0, 0, 0)"
				},
				{
					"type": "Rotator",
					"name": "relative_rotation",
					"default": "Rotator(0, 0, 0)"
				}
			]
		},
		{
			"authority": "server",
			"name": "Drop",
			"description": "Drops any Pickable the Character is holding",
			"parameters": [
			]
		},
		{
			"authority": "server",
			"name": "EnterVehicle",
			"description": "Enters the Vehicle at Seat (0 - Driver)",
			"parameters": [
				{
					"type": "Vehicle",
					"name": "vehicle"
				},
				{
					"type": "number",
					"name": "seat",
					"default": "0"
				}
			]
		},
		{
			"authority": "server",
			"name": "GrabProp",
			"description": "Gives a Prop to the Character",
			"parameters": [
				{
					"type": "Prop",
					"name": "prop"
				}
			]
		},
		{
			"authority": "both",
			"name": "HideBone",
			"description": "Hides a bone of this Character",
			"description_long": "Hides a bone of this Character.<br/><br/>Check <a href='character.mdx#characters-skeleton-bone-names'>Bone Names List</a>",
			"parameters": [
				{
					"type": "string",
					"name": "bone_name",
					"default": "",
					"description": "Bone to hide"
				}
			]
		},
		{
			"authority": "both",
			"name": "UnHideBone",
			"description": "UnHide a bone of this Character",
			"description_long": "UnHide a bone of this Character.<br/><br/>Check <a href='character.mdx#characters-skeleton-bone-names'>Bone Names List</a>",
			"parameters": [
				{
					"type": "string",
					"name": "bone_name",
					"description": "Bone to unhide"
				}
			]
		},
		{
			"authority": "both",
			"name": "IsBoneHidden",
			"return": [
				{
					"type": "boolean",
					"description": "if the bone is hidden"
				}
			],
			"description": "Gets if a bone is hidden",
			"parameters": [
				{
					"type": "string",
					"name": "bone_name",
					"description": "Bone to check"
				}
			]
		},
		{
			"authority": "server",
			"name": "Jump",
			"description": "Triggers this Character to jump"
		},
		{
			"authority": "server",
			"name": "LeaveVehicle",
			"description": "Leaves the current Vehicle"
		},
		{
			"authority": "server",
			"name": "LookAt",
			"description": "AI: Tries to make this Character to look at Location",
			"parameters": [
				{
					"type": "Vector",
					"name": "location",
					"description": "World location to look"
				}
			]
		},
		{
			"authority": "server",
			"name": "MoveTo",
			"description": "AI: Makes this Character to walk to the Location",
			"description_long": "AI: Makes this Character to walk to the Location<br/><br/>Triggers event <a href='character#movecompleted'>MoveCompleted</a>",
			"parameters": [
				{
					"type": "Vector",
					"name": "location"
				},
				{
					"type": "number",
					"name": "acceptance_radius",
					"default": "50"
				}
			]
		},
		{
			"authority": "server",
			"name": "Follow",
			"description": "AI: Makes this Character to follow another actor",
			"description_long": "AI: Makes this Character to follow another actor<br/><br/>Triggers event <a href='character#movecompleted'>MoveCompleted</a>",
			"parameters": [
				{
					"type": "Actor",
					"name": "actor",
					"description": "Actor to follow"
				},
				{
					"type": "number",
					"name": "acceptance_radius",
					"default": "50",
					"description": "Radius to consider success"
				},
				{
					"type": "boolean",
					"name": "stop_on_succeed",
					"default": "false",
					"description": "Whether to stop when reaching the target"
				},
				{
					"type": "boolean",
					"name": "stop_on_fail",
					"default": "false",
					"description": "Whether to stop when failed to reach the target"
				},
				{
					"type": "number",
					"name": "update_rate",
					"default": "0.25",
					"description": "How often to recalculate the AI path"
				}
			]
		},
		{
			"authority": "server",
			"name": "StopMovement",
			"description": "AI: Stops the movement",
			"description_long": "AI: Stops the movement<br/><br/>Triggers event [MoveCompleted](character#movecompleted)"
		},
		{
			"authority": "server",
			"name": "PickUp",
			"description": "Gives a Melee/Grenade/Weapon (Pickable) to the Character",
			"parameters": [
				{
					"type": "Pickable",
					"name": "pickable"
				}
			]
		},
		{
			"authority": "server",
			"name": "PlayAnimation",
			"description": "Plays an Animation Montage on this character",
			"parameters": [
				{
					"type": "AnimationPath",
					"name": "animation_path"
				},
				{
					"type": "AnimationSlotType",
					"name": "slot_type",
					"default": "AnimationSlotType.FullBody"
				},
				{
					"type": "boolean",
					"name": "loop_indefinitely",
					"default": "false"
				},
				{
					"type": "number",
					"name": "blend_in_time",
					"default": "0.25"
				},
				{
					"type": "number",
					"name": "blend_out_time",
					"default": "0.25"
				},
				{
					"type": "number",
					"name": "play_rate",
					"default": "1.0"
				},
				{
					"type": "boolean",
					"name": "stop_all_montages",
					"default": "false",
					"description": "Stops all running Montages from the same Group"
				}
			]
		},
		{
			"authority": "both",
			"name": "RemoveSkeletalMeshAttached",
			"description": "Removes, if existing, a SkeletalMesh from this Character given it's custom ID",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				}
			]
		},
		{
			"authority": "both",
			"name": "RemoveStaticMeshAttached",
			"description": "Removes, if existing, a StaticMesh from this Character given it's custom ID",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				}
			]
		},
		{
			"authority": "both",
			"name": "RemoveAllStaticMeshesAttached",
			"description": "Removes all StaticMeshes attached"
		},
		{
			"authority": "both",
			"name": "RemoveAllSkeletalMeshesAttached",
			"description": "Removes all SkeletalMeshes attached"
		},
		{
			"authority": "server",
			"name": "Respawn",
			"description": "Respawns the Character, fullying it's Health and moving it to it's Initial Location",
			"parameters": [
				{
					"type": "Vector",
					"name": "location",
					"default": "initial location",
					"description": "If not passed will use the initial location passed when the Character spawned"
				},
				{
					"type": "Rotator",
					"name": "rotation",
					"default": "Rotator(0, 0, 0)"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetAccelerationSettings",
			"description": "Sets the Movement Max Acceleration of this Character",
			"parameters": [
				{
					"type": "number",
					"name": "walking",
					"default": "768"
				},
				{
					"type": "number",
					"name": "parachuting",
					"default": "512"
				},
				{
					"type": "number",
					"name": "skydiving",
					"default": "768"
				},
				{
					"type": "number",
					"name": "falling",
					"default": "128"
				},
				{
					"type": "number",
					"name": "swimming",
					"default": "256"
				},
				{
					"type": "number",
					"name": "swimming_surface",
					"default": "256"
				},
				{
					"type": "number",
					"name": "flying",
					"default": "1024"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetBrakingSettings",
			"description": "Sets the Movement Braking Settings of this Character",
			"parameters": [
				{
					"type": "number",
					"name": "ground_friction",
					"default": "2"
				},
				{
					"type": "number",
					"name": "braking_friction_factor",
					"default": "2"
				},
				{
					"type": "number",
					"name": "braking_walking",
					"default": "96"
				},
				{
					"type": "number",
					"name": "braking_flying",
					"default": "3000"
				},
				{
					"type": "number",
					"name": "braking_swimming",
					"default": "10"
				},
				{
					"type": "number",
					"name": "braking_falling",
					"default": "0"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCameraMode",
			"description": "Sets the Camera Mode",
			"description_long": "Sets the Camera Mode (i.e. Only TPS, FPS or if allow both)<br/><br/>Using FPSOnly CameraMode on AI will lock his body rotation (when using LookAt)",
			"parameters": [
				{
					"type": "CameraMode",
					"name": "camera_mode"
				}
			]
		},
		{
			"authority": "client",
			"name": "SetCameraOffset",
			"description": "Sets the Camera Offset (only affects TPS)",
			"parameters": [
				{
					"type": "Vector",
					"name": "camera_offset"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCanCrouch",
			"description": "Sets if this Character is allowed to Crouch and to Prone",
			"parameters": [
				{
					"type": "boolean",
					"name": "can_crouch"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCanAim",
			"description": "Sets if this Character is allowed to Aim",
			"parameters": [
				{
					"type": "boolean",
					"name": "can_aim"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCanDrop",
			"description": "Sets if this Character is allowed to Drop the Picked up item",
			"parameters": [
				{
					"type": "boolean",
					"name": "can_drop"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCanSprint",
			"description": "Sets if this Character is allowed to Sprint",
			"parameters": [
				{
					"type": "boolean",
					"name": "can_sprint"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCanGrabProps",
			"description": "Sets if this Character is allowed to Grab any Prop",
			"parameters": [
				{
					"type": "boolean",
					"name": "can_grab_props"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCanPickupPickables",
			"description": "Sets if this Character is allowed to Pick up any Pickable (Weapon, Grenade, Melee...)",
			"parameters": [
				{
					"type": "boolean",
					"name": "can_pickup"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCanPunch",
			"description": "Sets if this Character is allowed to Punch",
			"parameters": [
				{
					"type": "boolean",
					"name": "can_punch"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCanDeployParachute",
			"description": "Sets if this Character is allowed to deploy the Parachute",
			"parameters": [
				{
					"type": "boolean",
					"name": "can_deploy_parachute"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetCapsuleSize",
			"description": "Sets this Character's Capsule size",
			"description_long": "Sets this Character's Capsule size (will affect Camera location and Character's collision)",
			"parameters": [
				{
					"type": "boolean",
					"name": "radius",
					"description": "Default is 42"
				},
				{
					"type": "boolean",
					"name": "half_height",
					"description": "Default is 96"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetDamageMultiplier",
			"description": "Changes how much damage this character takes on specific bones",
			"parameters": [
				{
					"type": "string",
					"name": "bone_name"
				},
				{
					"type": "number",
					"name": "multiplier"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetDeathSound",
			"description": "Changes the Death sound when Character dies",
			"parameters": [
				{
					"type": "string",
					"name": "sound_asset"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetFallDamageTaken",
			"description": "Set the Fall Damage multiplier taken when falling from High places",
			"description_long": "Set the Fall Damage multiplier taken when falling from High places.<br/><br/>Setting to 0 will make the Character to do not take damage or enter ragdoll mode",
			"parameters": [
				{
					"type": "number",
					"name": "damage",
					"description": "Default is 10"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetFlyingMode",
			"description": "Sets the Flying Mode",
			"parameters": [
				{
					"type": "boolean",
					"name": "flying_mode"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetFOVMultiplier",
			"description": "Sets the Field of View multiplier",
			"parameters": [
				{
					"type": "number",
					"name": "multiplier"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetHighFallingTime",
			"description": "Sets time to transition to HighFalling state",
			"description_long": "Sets time elapsed until automatically transition to HighFalling state (from SmallFalling) in seconds",
			"parameters": [
				{
					"type": "number",
					"name": "time",
					"description": "Default is 1 second"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetGaitMode",
			"description": "Sets the Gait Mode",
			"parameters": [
				{
					"type": "GaitMode",
					"name": "mode"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetGravityScale",
			"description": "Changes the Gravity Scale",
			"description_long": "Changes the Gravity Scale of this Character (can be negative)",
			"parameters": [
				{
					"type": "number",
					"name": "scale"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetHealth",
			"description": "Sets the Health of this Character",
			"description_long": "Sets the Health of this Character. You can only call it on alive characters (call Respawn first)",
			"parameters": [
				{
					"type": "number",
					"name": "new_health"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetImpactDamageTaken",
			"description": "Set the Impact Damage taken when being roamed by things",
			"description_long": "Set the Impact Damage taken when being roamed by things.<br/><brq>Setting to 0 will make the Character to do not take damage or enter ragdoll mode",
			"parameters": [
				{
					"type": "number",
					"name": "damage",
					"description": "Default is 10"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetInvulnerable",
			"description": "Sets if the Character can receive any damage",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_invulnerable"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetJumpZVelocity",
			"description": "Sets the velocity of the jump",
			"parameters": [
				{
					"type": "number",
					"name": "velocity",
					"description": "Default is 450"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetMaxHealth",
			"description": "Sets the MaxHealth of this Character",
			"parameters": [
				{
					"type": "number",
					"name": "new_max_health"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetMesh",
			"description": "Changes the Character Mesh on the fly",
			"parameters": [
				{
					"type": "SkeletalMeshPath",
					"name": "skeletal_mesh_asset"
				}
			]
		},
		{
			"authority": "both",
			"name": "SetMorphTarget",
			"description": "Set Morph Target with Name and Value",
			"parameters": [
				{
					"type": "string",
					"name": "name",
					"description": "Morph Target Name"
				},
				{
					"type": "number",
					"name": "value"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetMorphTarget",
			"description": "Returns the value of a Morph Target",
			"return": [
				{
					"type": "number",
					"description": "value of the Morph Target"
				}
			],
			"parameters": [
				{
					"type": "string",
					"name": "name",
					"description": "Morph Target Name"
				}
			]
		},
		{
			"authority": "both",
			"name": "ClearMorphTargets",
			"description": "Clear all Morph Target that are set to this Mesh"
		},
		{
			"authority": "client",
			"name": "GetAllMorphTargetNames",
			"description": "Returns a table with all morph targets available",
			"return": [
				{
					"type": "string[]",
					"description": "table with all morph targets available"
				}
			]
		},
		{
			"authority": "both",
			"name": "SetPhysicalAnimationSettings",
			"description": "Applies the physical animation settings to the body given",
			"parameters": [
				{
					"type": "string",
					"name": "bone",
					"description": "The body we will be driving"
				},
				{
					"type": "boolean",
					"name": "include_self",
					"description": "Whether to modify the given body"
				},
				{
					"type": "boolean",
					"name": "is_local_simulation",
					"description": "Whether the drive targets are in world space or local"
				},
				{
					"type": "boolean",
					"name": "orientation_strength",
					"default": "0",
					"description": "The strength used to correct orientation error"
				},
				{
					"type": "boolean",
					"name": "angular_velocity_strength",
					"default": "0",
					"description": "The strength used to correct angular velocity error"
				},
				{
					"type": "boolean",
					"name": "position_strength",
					"default": "0",
					"description": "The strength used to correct linear position error. Only used for non-local simulation"
				},
				{
					"type": "boolean",
					"name": "velocity_strength",
					"default": "0",
					"description": "The strength used to correct linear velocity error. Only used for non-local simulation"
				},
				{
					"type": "boolean",
					"name": "max_linear_force",
					"default": "0",
					"description": "The max force used to correct linear errors"
				},
				{
					"type": "boolean",
					"name": "max_angular_force",
					"default": "0",
					"description": "The max force used to correct angular errors"
				}
			]
		},
		{
			"authority": "both",
			"name": "ResetPhysicalAnimationSettings",
			"description": "Resets all Physical Animation settings"
		},
		{
			"authority": "server",
			"name": "SetMovementEnabled",
			"description": "Enables/Disables Character's Movement",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_movement_enabled"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetParachuteTexture",
			"description": "Changes the Parachute Texture",
			"parameters": [
				{
					"type": "ImagePath",
					"name": "texture"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetPainSound",
			"description": "Changes the Pain sound when Character takes damage",
			"parameters": [
				{
					"type": "SoundPath",
					"name": "sound_asset"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetPunchDamage",
			"description": "Set the Punch Damage this Character will apply on others",
			"parameters": [
				{
					"type": "number",
					"name": "damage",
					"description": "Default is 15"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetRagdollMode",
			"description": "Sets Character Ragdoll Mode",
			"parameters": [
				{
					"type": "boolean",
					"name": "ragdoll_enabled"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetSpeedMultiplier",
			"description": "Sets all speed multiplier",
			"parameters": [
				{
					"type": "number",
					"name": "multiplier",
					"description": "1 is normal"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetStanceMode",
			"description": "Sets the Stance Mode",
			"parameters": [
				{
					"type": "StanceMode",
					"name": "mode"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetTeam",
			"description": "Sets a Team which will disable damaging same Team Members",
			"parameters": [
				{
					"type": "number",
					"name": "team",
					"description": "0 is neutral and default"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetViewMode",
			"description": "Sets the View Mode",
			"parameters": [
				{
					"type": "ViewMode",
					"name": "view_mode"
				}
			]
		},
		{
			"authority": "server",
			"name": "SetWeaponAimMode",
			"description": "Sets the Weapon's Aim Mode",
			"parameters": [
				{
					"type": "AimMode",
					"name": "aim_mode"
				}
			]
		},
		{
			"authority": "server",
			"name": "StopAnimation",
			"description": "Stops an Animation Montage on this character",
			"parameters": [
				{
					"type": "AnimationPath",
					"name": "animation_asset"
				}
			]
		},
		{
			"authority": "server",
			"name": "UnGrabProp",
			"description": "UnGrabs/Drops the Prop the Character is holding"
		},
		{
			"authority": "both",
			"name": "IsInRagdollMode",
			"description": "Gets if Character is in ragdoll mode",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "IsInvulnerable",
			"description": "Gets if is invulnerable",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "IsMovementEnabled",
			"description": "Gets if has movement enabled",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCameraMode",
			"description": "Gets the camera mode",
			"return": [
				{
					"type": "CameraMode"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCanDrop",
			"description": "Gets if can drop",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCanPunch",
			"description": "Gets if can punch",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCanAim",
			"description": "Gets if can aim",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCanCrouch",
			"description": "Gets if can crouch",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCanSprint",
			"description": "Gets if can sprint",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCanGrabProps",
			"description": "Gets if can grab props",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCanPickupPickables",
			"description": "Gets if can pickup Pickables (Weapons, Melee, Grenade...)",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetCapsuleSize",
			"description": "Gets the Capsule Size",
			"return": [
				{
					"type": "table",
					"description": "table in the format <code>{ Radius, HalfHeight }</code>"
				}
			]
		},
		{
			"authority": "client",
			"name": "GetBoneTransform",
			"description": "Gets a Bone Transform in world space given a bone name",
			"return": [
				{
					"type": "table",
					"description": "table in the format <code>{ Location, Rotation }</code>"
				}
			],
			"parameters": [
				{
					"name": "bone_name",
					"type": "string"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetControlRotation",
			"description": "Gets the Control Rotation",
			"return": [
				{
					"type": "Rotator"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetDamageMultiplier",
			"description": "Gets the Damage Multiplier of a bone",
			"return": [
				{
					"type": "number",
					"description": "the damage multiplier of the bone"
				}
			],
			"parameters": [
				{
					"name": "bone_name",
					"type": "string"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetFallDamageTaken",
			"description": "Gets the Fall Damage",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetFallingMode",
			"description": "Gets the FallingMode",
			"return": [
				{
					"type": "FallingMode"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetFlyingMode",
			"description": "Gets if it's in Flying mode",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetGaitMode",
			"description": "Gets the GaitMode",
			"return": [
				{
					"type": "GaitMode"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetGrabbedProp",
			"description": "Gets the Grabbed Prop",
			"return": [
				{
					"type": "Prop?"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetGravityScale",
			"description": "Gets the gravity scale",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetHealth",
			"description": "Gets the current health",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetImpactDamageTaken",
			"description": "Gets the impact damage taken",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetJumpZVelocity",
			"description": "Gets the Jump Z Velocity",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetMaxHealth",
			"description": "Gets the Max Health",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetMesh",
			"description": "Gets the Skeletal Mesh Asset",
			"return": [
				{
					"type": "SkeletalMeshPath"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetMovingTo",
			"description": "Gets the Moving To location",
			"return": [
				{
					"type": "Vector",
					"description": "the moving to location or Vector(0, 0, 0) if not moving"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetPicked",
			"description": "Gets the Pickable if picking up",
			"return": [
				{
					"type": "Pickable?"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetPlayer",
			"description": "Gets the possessing Player",
			"return": [
				{
					"type": "Player?"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetPunchDamage",
			"description": "Gets the punch damage",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetSpeedMultiplier",
			"description": "Gets the speed multiplier",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetStanceMode",
			"description": "Gets the Stance Mode",
			"return": [
				{
					"type": "StanceMode"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetSwimmingMode",
			"description": "Gets the Swimming Mode",
			"return": [
				{
					"type": "SwimmingMode"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetTeam",
			"description": "Gets the Team",
			"return": [
				{
					"type": "number"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetVehicle",
			"description": "Gets the entered Vehicle",
			"return": [
				{
					"type": "Vehicle?"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetViewMode",
			"description": "Gets the View Mode",
			"return": [
				{
					"type": "ViewMode"
				}
			]
		},
		{
			"authority": "both",
			"name": "GetWeaponAimMode",
			"description": "Gets the Weapon Aim Mode",
			"return": [
				{
					"type": "AimMode"
				}
			]
		}
	],
	"events": [
		{
			"authority": "client",
			"name": "AnimationBeginNotify",
			"description": "When an Animation Montage Notify begins",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "string",
					"name": "notify_name"
				}
			]
		},
		{
			"authority": "client",
			"name": "AnimationEndNotify",
			"description": "When an Animation Montage Notify ends",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "string",
					"name": "notify_name"
				}
			]
		},
		{
			"authority": "both",
			"name": "Death",
			"description": "When Character Dies",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "number",
					"name": "last_damage_taken"
				},
				{
					"type": "string",
					"name": "last_bone_damaged"
				},
				{
					"type": "DamageType",
					"name": "damage_type_reason"
				},
				{
					"type": "Vector",
					"name": "hit_from_direction"
				},
				{
					"type": "Player?",
					"name": "instigator"
				},
				{
					"type": "Actor?",
					"name": "causer",
					"description": "The object which caused the damage"
				}
			]
		},
		{
			"authority": "both",
			"name": "Drop",
			"description": "When Character drops the currently picked up Pickable",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Pickable",
					"name": "object"
				},
				{
					"type": "boolean",
					"name": "triggered_by_player"
				}
			]
		},
		{
			"authority": "both",
			"name": "EnterVehicle",
			"description": "When Character enters a vehicle",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Vehicle",
					"name": "vehicle"
				},
				{
					"type": "number",
					"name": "seat_index"
				}
			]
		},
		{
			"authority": "server",
			"name": "AttemptEnterVehicle",
			"description": "Triggered when a Character attempts to enter a vehicle",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Vehicle",
					"name": "vehicle"
				},
				{
					"type": "number",
					"name": "seat_index"
				}
			],
			"return": [
				{
					"type": "boolean",
					"description": "Return <code>false</code> to prevent it"
				}
			]
		},
		{
			"authority": "both",
			"name": "FallingModeChanged",
			"description": "Called when FallingMode changes",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "FallingMode",
					"name": "old_state"
				},
				{
					"type": "FallingMode",
					"name": "new_state"
				}
			]
		},
		{
			"authority": "both",
			"name": "Fire",
			"description": "When Character fires a Weapon",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Weapon",
					"name": "weapon"
				}
			]
		},
		{
			"authority": "both",
			"name": "GaitModeChanged",
			"description": "Called when GaitMode changes",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "GaitMode",
					"name": "old_state"
				},
				{
					"type": "GaitMode",
					"name": "new_state"
				}
			]
		},
		{
			"authority": "both",
			"name": "GrabProp",
			"description": "When Character grabs up a Prop",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Prop",
					"name": "prop"
				}
			]
		},
		{
			"authority": "both",
			"name": "HealthChanged",
			"description": "When Character has it's Health changed, or because took damage or manually set through scripting or respawning",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "number",
					"name": "old_health"
				},
				{
					"type": "number",
					"name": "new_health"
				}
			]
		},
		{
			"authority": "both",
			"name": "Highlight",
			"description": "When Character highlights/looks at a Prop or a Pickable",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "boolean",
					"name": "is_highlighted",
					"description": "Whether the object is being highlighted or not"
				},
				{
					"type": "Prop|Pickable",
					"name": "object"
				}
			]
		},
		{
			"authority": "server",
			"name": "Interact",
			"description": "Triggered when a Character interacts with a Prop or Pickable",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Prop|Pickable",
					"name": "object"
				}
			],
			"return": [
				{
					"type": "boolean",
					"description": "Return <code>false</code> to prevent it"
				}
			]
		},
		{
			"authority": "both",
			"name": "LeaveVehicle",
			"description": "When Character leaves a vehicle",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Vehicle",
					"name": "vehicle"
				}
			]
		},
		{
			"authority": "server",
			"name": "AttemptLeaveVehicle",
			"description": "Triggered when this Character attempts to leave a vehicle",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Vehicle",
					"name": "vehicle"
				}
			],
			"return": [
				{
					"type": "boolean",
					"description": "Return <code>false</code> to prevent it"
				}
			]
		},
		{
			"authority": "both",
			"name": "MoveCompleted",
			"description": "Called when AI reaches it's destination, or when it fails",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "boolean",
					"name": "succeeded"
				}
			]
		},
		{
			"authority": "both",
			"name": "PickUp",
			"description": "When Character picks up anything",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Pickable",
					"name": "object"
				}
			]
		},
		{
			"authority": "both",
			"name": "Possessed",
			"description": "When Character is possessed",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Player",
					"name": "possesser"
				}
			]
		},
		{
			"authority": "both",
			"name": "Punch",
			"description": "When Character punches",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				}
			]
		},
		{
			"authority": "both",
			"name": "RagdollModeChanged",
			"description": "When Character enters or leaves ragdoll",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "boolean",
					"name": "old_state"
				},
				{
					"type": "boolean",
					"name": "new_state"
				}
			]
		},
		{
			"authority": "both",
			"name": "AttemptReload",
			"description": "Triggered when this Character attempts to reload",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Weapon",
					"name": "weapon"
				}
			],
			"return": [
				{
					"type": "boolean",
					"description": "Return <code>false</code> to prevent it"
				}
			]
		},
		{
			"authority": "both",
			"name": "Reload",
			"description": "When Character reloads a weapon",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Weapon",
					"name": "weapon"
				},
				{
					"type": "number",
					"name": "ammo_to_reload"
				}
			]
		},
		{
			"authority": "both",
			"name": "Respawn",
			"description": "When Character Respawns",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				}
			]
		},
		{
			"authority": "both",
			"name": "StanceModeChanged",
			"description": "Called when StanceMode changes",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "StanceMode",
					"name": "old_state"
				},
				{
					"type": "StanceMode",
					"name": "new_state"
				}
			]
		},
		{
			"authority": "both",
			"name": "SwimmingModeChanged",
			"description": "Called when Swimming Mode changes",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "SwimmingMode",
					"name": "old_state"
				},
				{
					"type": "SwimmingMode",
					"name": "new_state"
				}
			]
		},
		{
			"authority": "both",
			"name": "TakeDamage",
			"description": "Triggered when this Character takes damage",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "number",
					"name": "damage"
				},
				{
					"type": "string",
					"name": "bone",
					"description": "Damaged bone"
				},
				{
					"type": "DamageType",
					"name": "type",
					"description": "Damage Type"
				},
				{
					"type": "Vector",
					"name": "from_direction",
					"description": "Direction of the damage relative to the damaged actor"
				},
				{
					"type": "Player",
					"name": "instigator",
					"description": "The player which caused the damage"
				},
				{
					"type": "any",
					"name": "causer",
					"description": "The object which caused the damage"
				}
			],
			"return": [
				{
					"type": "boolean",
					"description": "Return <code>false</code> to cancel the damage (will still display animations, particles and apply impact forces)"
				}
			]
		},
		{
			"authority": "both",
			"name": "UnGrabProp",
			"description": "When Character drops a Prop",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Prop",
					"name": "prop"
				}
			]
		},
		{
			"authority": "both",
			"name": "UnPossessed",
			"description": "When Character is unpossessed",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "Player",
					"name": "old_possesser"
				}
			]
		},
		{
			"authority": "both",
			"name": "ViewModeChanged",
			"description": "When Character changes it's View Mode",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "ViewMode",
					"name": "old_state"
				},
				{
					"type": "ViewMode",
					"name": "new_state"
				}
			]
		},
		{
			"authority": "both",
			"name": "WeaponAimModeChanged",
			"description": "Called when Weapon Aim Mode changes",
			"arguments": [
				{
					"type": "Character",
					"name": "self"
				},
				{
					"type": "AimMode",
					"name": "old_state"
				},
				{
					"type": "AimMode",
					"name": "new_state"
				}
			]
		}
	]
}