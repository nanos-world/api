{
	"name": "Actor",
	"description": "An <b>Actor</b> is an object which can be spawned and destroyed through Lua.<br>Actors support 3D transformations such as translation (location), rotation, and scale.<br><br>In nanos world, <b>Actor</b> is the base for several entities, and all those entities share the same <b>Methods</b> and <b>Events</b> described in this page.",
	"authority": "both",
	"static_functions": [
		{
			"name": "GetAll",
			"description": "Returns a table containing all Actors of the class this is called on",
			"authority": "both",
			"return": {
				"type": "table",
				"description": "Copy of table containing all actors"
			}
		},
		{
			"name": "GetByIndex",
			"description": "Returns a specific Actor of this class at an index",
			"authority": "both",
			"parameters": [
				{
					"type": "number",
					"name": "index",
					"description": "The index of the Actor"
				}
			],
			"return": {
				"type": "Actor",
				"description": "Actor at index"
			}
		},
		{
			"name": "GetCount",
			"description": "Returns how many Actors of this class exist",
			"authority": "both",
			"return": {
				"type": "number",
				"description": "Number of Actors of this class"
			}
		},
		{
			"name": "GetPairs",
			"description": "Returns an iterator with all Actors of this class to be used with <code>pairs()</code>",
			"description_long": "Returns an iterator with all Actors of this class to be used with <code>pairs()</code>. This is a more performant method than <code>GetAll()</code>, as it will return the iterator to access the Actors directly instead of creating and returning a copy of the Actors table.<br><br><b>Note:</b> Destroying Actors from inside a <code>GetPairs()</code> loop will cause the iterable to change size during the process. If you want to loop-and-destroy, please use <code>GetAll()</code>.",
			"authority": "both",
			"return": {
				"type": "iterator",
				"description": "Iterator with all Actors of this class"
			}
		}
	],
	"functions": [
		{
			"name": "AddImpulse",
			"description": "Applies a force in world world to this Actor",
			"description_long": "Applies a force in world world to this Actor (the force is applied client side, by, in most cases, the player closest to this Actor)",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "force"
				},
				{
					"type": "boolean",
					"name": "velocity_change",
					"default": "false",
					"description": "Whether to ignore mass"
				}
			]
		},
		{
			"name": "AttachTo",
			"description": "Attaches this Actor to any other Actor, optionally at a specific bone",
			"description_long": "<p>Attaches this Actor to any other Actor, optionally at a specific bone</p><ul><li><code>AttachmentRule.KeepRelative</code> will keep the current relative position/rotation if already attached.</li><li><code>AttachmentRule.KeepWorld</code> will calculate the new relative position/rotation so the Actor stays at the same position after being attached.</li><li><code>AttachmentRule.SnapToTarget</code> will set the Actor to the same position/rotation as <code>other_actor</code> (or at the bone location) and reset its relative position/rotation to zero.</li></ul><p>Setting <code>lifespan_when_detached</code> to <code>0</code> will automatically destroy this actor when detached, setting it to <code>10</code> will destroy this after 10 seconds when detached.</p>",
			"authority": "authority",
			"parameters": [
				{
					"type": "Actor",
					"name": "other",
					"description": "Other actor to attach"
				},
				{
					"type": "AttachmentRule",
					"name": "attachment_rule",
					"default": "SnapToTarget",
					"description": "How to attach"
				},
				{
					"type": "string",
					"name": "bone_name",
					"default": "",
					"description": "Which bone to attach to"
				},
				{
					"type": "number",
					"name": "lifespan_when_detached",
					"default": "-1",
					"description": "Seconds before destroying this Actor when detached"
				},
				{
					"type": "boolean",
					"name": "use_absolute_rotation",
					"default": "false",
					"description": "Whether to force attached object to use absolute rotation (will not follow parent)"
				}
			]
		},
		{
			"name": "Destroy",
			"description": "Destroys this Actor",
			"authority": "authority",
			"parameters": []
		},
		{
			"name": "Detach",
			"description": "Detaches this Actor from AttachedTo Actor",
			"authority": "authority",
			"parameters": []
		},
		{
			"name": "SetCollision",
			"description": "Sets this Actor's collision type",
			"authority": "authority",
			"parameters": [
				{
					"type": "CollisionType",
					"name": "collision_type"
				}
			]
		},
		{
			"name": "SetForce",
			"description": "Adds a permanent force to this Actor, set to Vector(0, 0, 0) to cancel",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "force"
				},
				{
					"type": "boolean",
					"name": "is_local",
					"default": "true",
					"description": "Whether to apply the force in local space"
				}
			]
		},
		{
			"name": "SetGravityEnabled",
			"description": "Sets whether gravity is enabled on this Actor",
			"authority": "authority",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_enabled"
				}
			]
		},
		{
			"name": "SetVisibility",
			"description": "Sets whether the actor is visible or not",
			"authority": "both",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_visible"
				}
			]
		},
		{
			"name": "SetHighlightEnabled",
			"description": "Sets whether the highlight is enabled on this Actor, and which highlight index to use",
			"authority": "both",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_enabled"
				},
				{
					"type": "number",
					"name": "index",
					"default": "0",
					"description": "Index to use (should be <code>0</code>, <code>1</code or <code>2</code>)"
				}
			]
		},
		{
			"name": "SetOutlineEnabled",
			"description": "Sets whether the outline is enabled on this Actor, and which outline index to use",
			"authority": "both",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_enabled"
				},
				{
					"type": "number",
					"name": "index",
					"default": "0",
					"description": "Index to use (should be <code>0</code>, <code>1</code or <code>2</code>)"
				}
			]
		},
		{
			"name": "SetLifeSpan",
			"description": "Sets the time (in seconds) before this Actor is destroyed. After this time has passed, the actor will be automatically destroyed.",
			"authority": "authority",
			"parameters": [
				{
					"type": "number",
					"name": "seconds",
					"description": "Seconds before being destroyed"
				}
			]
		},
		{
			"name": "SetLocation",
			"description": "Sets this Actor's location in the game world",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "location"
				}
			]
		},
		{
			"name": "SetRotation",
			"description": "Sets this Actor's rotation in the game world",
			"authority": "authority",
			"parameters": [
				{
					"type": "Rotator",
					"name": "rotation"
				}
			]
		},
		{
			"name": "SetRelativeLocation",
			"description": "Sets this Actor's relative location in local space (only if this actor is attached)",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "relative_location"
				}
			]
		},
		{
			"name": "SetRelativeRotation",
			"description": "Sets this Actor's relative rotation in local space (only if this actor is attached)",
			"authority": "authority",
			"parameters": [
				{
					"type": "Rotator",
					"name": "relative_rotation"
				}
			]
		},
		{
			"name": "SetScale",
			"description": "Sets this Actor's scale",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "scale"
				}
			]
		},
		{
			"name": "SetNetworkAuthority",
			"description": "Sets the Player to have network authority over this Actor",
			"description_long": "Sets the Player to have network authority over this Actor. This Player will be manually assigned to handle this Actor's physics and share its location with other clients. The authority assignment will still be overridden by the game automatically<br><br>Please refer to <a href=\"https://docs.nanos.world/docs/core-concepts/scripting/authority-concepts#network-authority\">Network Authority</a> for more information",
			"authority": "server",
			"parameters": [
				{
					"type": "Player",
					"name": "player",
					"default": "nil",
					"description": "New player which will assume the Network Authority of this Actor"
				}
			]
		},
		{
			"name": "SetValue",
			"description": "Sets a value in this Actor",
			"description_long": "Sets a value in this Actor, which can be accessed by any package (optionally sync on clients if called from server)<br><br>Please refer to <a href=\"https://docs.nanos.world/docs/core-concepts/scripting/entity-values\">Entity Values</a> for more information",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "key"
				},
				{
					"type": "any",
					"name": "value"
				},
				{
					"type": "boolean",
					"name": "sync_on_clients",
					"default": "false",
					"description": "Server side parameter, if enabled will sync this value with all clients"
				}
			]
		},
		{
			"name": "TranslateTo",
			"description": "Smoothly moves this actor to a location over a certain time",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "location"
				},
				{
					"type": "number",
					"name": "time",
					"description": "Time to interpolate from current location to target location"
				},
				{
					"type": "number",
					"name": "exp",
					"default": "0",
					"description": "Exponent used to smooth interpolation. Use <code>0</code> for linear movement"
				}
			]
		},
		{
			"name": "RotateTo",
			"description": "Smoothly rotates this actor to an angle over a certain time",
			"authority": "authority",
			"parameters": [
				{
					"type": "Rotator",
					"name": "rotation"
				},
				{
					"type": "number",
					"name": "time",
					"description": "Time to interpolate from current location to target location"
				},
				{
					"type": "number",
					"name": "exp",
					"default": "0",
					"description": "Exponent used to smooth interpolation. Use <code>0</code> for linear movement"
				}
			]
		},
		{
			"name": "IsBeingDestroyed",
			"description": "Returns true if this Actor is being destroyed",
			"description_long": "Returns true if this Actor is being destroyed.<br>You can check this inside events like <code>Drop</code> to see if a Pickable is being dropped because it's going to be destroyed",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "boolean"
			}
		},
		{
			"name": "IsVisible",
			"description": "Returns true if this Actor is visible",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "boolean"
			}
		},
		{
			"name": "IsGravityEnabled",
			"description": "Returns true if gravity is enabled on this Actor",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "boolean"
			}
		},
		{
			"name": "IsInWater",
			"description": "Returns true if this Actor is in water",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "boolean"
			}
		},
		{
			"name": "IsNetworkDistributed",
			"description": "Returns true if this Actor is currently network distributed",
			"description_long": "Returns true if this Actor is currently network distributed. Only actors being network distributed can have their network authority set<br>Entities have NetworkDistributed automatically disabled when: Attached, Possessed, Grabbed, Picked Up or Driving",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "boolean"
			}
		},
		{
			"name": "IsValid",
			"description": "Returns true if this Actor is valid (i.e. wasn't destroyed and points to a valid Actor)",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "boolean"
			}
		},
		{
			"name": "GetAttachedEntities",
			"description": "Gets all Actors attached to this Actor",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "Actor[]"
			}
		},
		{
			"name": "GetAttachedTo",
			"description": "Gets the Actor this Actor is attached to",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "Actor?"
			}
		},
		{
			"name": "GetBounds",
			"description": "Gets this Actor's bounds",
			"authority": "client",
			"parameters": [],
			"return": {
				"type": "table",
				"description": "Returns table in the format <code>{\"Origin\", \"BoxExtent\", \"SphereRadius\"}</code>"
			}
		},
		{
			"name": "GetCollision",
			"description": "Gets this Actor's collision type",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "CollisionType"
			}
		},
		{
			"name": "GetID",
			"description": "Gets the universal network ID of this Actor (same on both client and server)",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "number"
			}
		},
		{
			"name": "GetLocation",
			"description": "Gets this Actor's location in the game world",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "Vector"
			}
		},
		{
			"name": "GetRotation",
			"description": "Gets this Actor's angle in the game world",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "Rotator"
			}
		},
		{
			"name": "GetForce",
			"description": "Gets this Actor's force (set by <code>SetForce()</code>)",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "Vector"
			}
		},
		{
			"name": "HasNetworkAuthority",
			"description": "Returns true if the local Player is currently the Network Authority of this Actor",
			"authority": "client",
			"parameters": [],
			"return": {
				"type": "boolean"
			}
		},
		{
			"name": "HasAuthority",
			"description": "Gets if this Actor was spawned by the client side",
			"authority": "client",
			"parameters": [],
			"return": {
				"type": "boolean",
				"description": "false if it was spawned by the Server or true if it was spawned by the client"
			}
		},
		{
			"name": "GetScale",
			"description": "Gets this Actor's scale",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "Vector"
			}
		},
		{
			"name": "GetType",
			"description": "Gets the type of this Actor",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "string"
			}
		},
		{
			"name": "GetValue",
			"description": "Gets a value stored on this Actor at the given key. Please refer to <a href\"https://docs.nanos.world/docs/core-concepts/scripting/entity-values\">Entity Values</a> for more information",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "key"
				},
				{
					"type": "any",
					"name": "fallback",
					"description": "Fallback value if key doesn't exist"
				}
			],
			"return": {
				"type": "any",
				"description": "Value at key or fallback if key doesn't exist"
			}
		},
		{
			"name": "GetVelocity",
			"description": "Gets this Actor's current velocity",
			"authority": "both",
			"parameters": [],
			"return": {
				"type": "Vector"
			}
		},
		{
			"name": "AddActorTag",
			"description": "Adds an Unreal Actor Tag to this Actor",
			"authority": "client",
			"parameters": [
				{
					"type": "string",
					"name": "tag"
				}
			]
		},
		{
			"name": "RemoveActorTag",
			"description": "Removes an Unreal Actor Tag from this Actor",
			"authority": "client",
			"parameters": [
				{
					"type": "string",
					"name": "tag"
				}
			]
		},
		{
			"name": "GetActorTags",
			"description": "Gets all Unreal Actor Tags on this Actor",
			"authority": "client",
			"parameters": [],
			"return": {
				"type": "string[]"
			}
		},
		{
			"name": "Subscribe",
			"description": "Subscribes to an Event",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "event_name",
					"description": "Name of the event to subscribe to"
				},
				{
					"type": "function",
					"name": "callback",
					"description": "Function to call when the event is triggered"
				}
			],
			"return": {
				"type": "function",
				"description": "Callback that was passed (useful for unsubscribing later if your callback is an anonymous function)"
			}
		},
		{
			"name": "Unsubscribe",
			"description": "Unsubscribes all callbacks from this Event in this Actor within this Package, or only the callback passed",
			"authority": "both",
			"parameters": [
				{
					"type": "string",
					"name": "event_name",
					"description": "Name of the event to unsubscribe from"
				},
				{
					"type": "function",
					"name": "callback",
					"default": "nil",
					"description": "Optional callback to unsubscribe"
				}
			]
		}
	],
	"events": [
		{
			"authority": "both",
			"name": "Destroy",
			"description": "Triggered when an Actor is destroyed",
			"arguments": [
				{
					"type": "Actor",
					"name": "self",
					"description": "The Actor which that was destroyed"
				}
			]
		},
		{
			"authority": "both",
			"name": "Spawn",
			"description": "Triggered when an Actor is spawned/created",
			"arguments": [
				{
					"type": "Actor",
					"name": "self",
					"description": "The Actor that was spawned"
				}
			]
		},
		{
			"authority": "both",
			"name": "ValueChange",
			"description": "Triggered when an Actor has a value changed with <code>:SetValue()</code>",
			"arguments": [
				{
					"type": "Actor",
					"name": "self",
					"description": "The Actor that just had a value changed"
				},
				{
					"type": "string",
					"name": "key",
					"description": "The key used"
				},
				{
					"type": "any",
					"name": "value",
					"description": "The value that was set"
				}
			]
		}
	]
}