{
	"name": "Actor",
	"description": "An <b>Actor</b> is an object which can be spawned and destroyed through Lua.<br>Actors support 3D transformations such as translation (location), rotation, and scale.<br><br>An <b>Actor</b> is the base for several entities, and all those entities share the same <b>Methods</b> and <b>Events</b> described in this page.",
	"is_base": true,
	"functions": [
		{
			"name": "AddImpulse",
			"description": "Applies a force in world world to this Actor",
			"description_long": "Applies a force in world world to this Actor (the force is applied client side, by, in most cases, the player closest to this Actor)",
			"authority": "network-authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "force"
				},
				{
					"type": "boolean",
					"name": "velocity_change",
					"default": "false",
					"description": "Whether to ignore mass"
				}
			]
		},
		{
			"name": "AttachTo",
			"description": "Attaches this Actor to any other Actor, optionally at a specific bone",
			"description_long": "<p>Attaches this Actor to any other Actor, optionally at a specific bone</p><ul><li><code>AttachmentRule.KeepRelative</code> will keep the current relative position/rotation if already attached.</li><li><code>AttachmentRule.KeepWorld</code> will calculate the new relative position/rotation so the Actor stays at the same position after being attached.</li><li><code>AttachmentRule.SnapToTarget</code> will set the Actor to the same position/rotation as <code>other_actor</code> (or at the bone location) and reset its relative position/rotation to zero.</li></ul><p>Setting <code>lifespan_when_detached</code> to <code>0</code> will automatically destroy this actor when detached, setting it to <code>10</code> will destroy this after 10 seconds when detached.</p>",
			"authority": "authority",
			"parameters": [
				{
					"type": "Actor",
					"name": "other",
					"description": "Other actor to attach"
				},
				{
					"type": "AttachmentRule",
					"name": "attachment_rule",
					"default": "SnapToTarget",
					"description": "How to attach"
				},
				{
					"type": "string",
					"name": "bone_name",
					"default": "",
					"description": "Which bone to attach to"
				},
				{
					"type": "float",
					"name": "lifespan_when_detached",
					"default": "-1",
					"description": "Seconds before destroying this Actor when detached"
				},
				{
					"type": "boolean",
					"name": "use_absolute_rotation",
					"default": "false",
					"description": "Whether to force attached object to use absolute rotation (will not follow parent)"
				}
			]
		},
		{
			"name": "Detach",
			"description": "Detaches this Actor from AttachedTo Actor",
			"authority": "authority"
		},
		{
			"name": "SetCollision",
			"description": "Sets this Actor's collision type",
			"authority": "authority",
			"parameters": [
				{
					"type": "CollisionType",
					"name": "collision_type"
				}
			]
		},
		{
			"name": "SetDimension",
			"description": "Sets this Actor's Dimension",
			"authority": "server",
			"parameters": [
				{
					"type": "integer",
					"name": "dimension"
				}
			],
			"relations": {
				"events": [
					"DimensionChange"
				]
			}
		},
		{
			"name": "SetForce",
			"description": "Adds a permanent force to this Actor, set to Vector(0, 0, 0) to cancel",
			"authority": "network-authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "force"
				},
				{
					"type": "boolean",
					"name": "is_local",
					"default": "true",
					"description": "Whether to apply the force in local space"
				}
			]
		},
		{
			"name": "SetGravityEnabled",
			"description": "Sets whether gravity is enabled on this Actor",
			"authority": "authority",
			"parameters": [
				{
					"type": "boolean",
					"name": "gravity_enabled"
				}
			]
		},
		{
			"name": "SetVisibility",
			"description": "Sets whether the actor is visible or not",
			"authority": "both",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_visible"
				}
			]
		},
		{
			"name": "SetHighlightEnabled",
			"description": "Sets whether the highlight is enabled on this Actor, and which highlight index to use",
			"description_long": "Sets whether the highlight is enabled on this Actor, and which highlight index to use. This will apply the highlight on every attached entity too",
			"authority": "client",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_enabled"
				},
				{
					"type": "integer",
					"name": "index",
					"default": "0",
					"description": "Index to use (should be <code>0</code>, <code>1</code> or <code>2</code>)"
				}
			],
			"relations": {
				"etc": [
					{
						"label": "Client.SetHighlightColor()",
						"url": "/docs/scripting-reference/static-classes/client#static-function-sethighlightcolor"
					}
				]
			}
		},
		{
			"name": "SetOutlineEnabled",
			"description": "Sets whether the outline is enabled on this Actor, and which outline index to use",
			"description_long": "Sets whether the outline is enabled on this Actor, and which outline index to use. This will apply the outline on every attached entity too",
			"authority": "client",
			"parameters": [
				{
					"type": "boolean",
					"name": "is_enabled"
				},
				{
					"type": "integer",
					"name": "index",
					"default": "0",
					"description": "Index to use (should be <code>0</code>, <code>1</code> or <code>2</code>)"
				}
			],
			"relations": {
				"etc": [
					{
						"label": "Client.SetOutlineColor()",
						"url": "/docs/scripting-reference/static-classes/client#static-function-setoutlinecolor"
					}
				]
			}
		},
		{
			"name": "SetLifeSpan",
			"description": "Sets the time (in seconds) before this Actor is destroyed. After this time has passed, the actor will be automatically destroyed.",
			"authority": "authority",
			"parameters": [
				{
					"type": "float",
					"name": "seconds",
					"description": "Seconds before being destroyed"
				}
			]
		},
		{
			"name": "SetLocation",
			"description": "Sets this Actor's location in the game world",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "location"
				}
			]
		},
		{
			"name": "SetRotation",
			"description": "Sets this Actor's rotation in the game world",
			"authority": "authority",
			"parameters": [
				{
					"type": "Rotator",
					"name": "rotation"
				}
			]
		},
		{
			"name": "SetRelativeLocation",
			"description": "Sets this Actor's relative location in local space (only if this actor is attached)",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "relative_location"
				}
			]
		},
		{
			"name": "SetRelativeRotation",
			"description": "Sets this Actor's relative rotation in local space (only if this actor is attached)",
			"authority": "authority",
			"parameters": [
				{
					"type": "Rotator",
					"name": "relative_rotation"
				}
			]
		},
		{
			"name": "SetScale",
			"description": "Sets this Actor's scale",
			"authority": "authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "scale"
				}
			]
		},
		{
			"name": "SetNetworkAuthority",
			"description": "Sets the Player to have network authority over this Actor",
			"description_long": "Sets the Player to have network authority over this Actor. This Player will be manually assigned to handle this Actor's physics and share its location with other clients. The authority assignment will still be overridden by the game automatically<br><br>Please refer to <a href=\"/docs/core-concepts/scripting/authority-concepts#network-authority\">Network Authority</a> for more information",
			"authority": "server",
			"parameters": [
				{
					"type": "Player",
					"name": "player",
					"default": "nil",
					"description": "New player which will assume the Network Authority of this Actor"
				}
			]
		},
		{
			"name": "SetNetworkAuthorityAutoDistributed",
			"description": "Sets if this Actor will auto distribute the network authority between players",
			"description_long": "Sets if this Actor will auto distribute the network authority between players when idle<br><br>Please refer to <a href=\"/docs/core-concepts/scripting/authority-concepts#network-authority\">Network Authority</a> for more information",
			"authority": "server",
			"parameters": [
				{
					"type": "boolean",
					"name": "auto_distribute",
					"description": "If this Actor will be auto network distributed"
				}
			]
		},
		{
			"name": "TranslateTo",
			"description": "Smoothly moves this actor to a location over a certain time",
			"authority": "network-authority",
			"parameters": [
				{
					"type": "Vector",
					"name": "location"
				},
				{
					"type": "float",
					"name": "time",
					"description": "Time to interpolate from current location to target location"
				},
				{
					"type": "float",
					"name": "exp",
					"default": "0",
					"description": "Exponent used to smooth interpolation. Use <code>0</code> for linear movement"
				}
			]
		},
		{
			"name": "RotateTo",
			"description": "Smoothly rotates this actor to an angle over a certain time",
			"authority": "network-authority",
			"parameters": [
				{
					"type": "Rotator",
					"name": "rotation"
				},
				{
					"type": "float",
					"name": "time",
					"description": "Time to interpolate from current location to target location"
				},
				{
					"type": "float",
					"name": "exp",
					"default": "0",
					"description": "Exponent used to smooth interpolation. Use <code>0</code> for linear movement"
				}
			]
		},
		{
			"name": "IsBeingDestroyed",
			"description": "Returns true if this Actor is being destroyed",
			"description_long": "Returns true if this Actor is being destroyed.<br>You can check this inside events like <code>Drop</code> to see if a Pickable is being dropped because it's going to be destroyed",
			"authority": "both",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"name": "IsVisible",
			"description": "Returns true if this Actor is visible",
			"authority": "both",
			"return": [
				{
					"name": "is_visible",
					"type": "boolean"
				}
			]
		},
		{
			"name": "IsGravityEnabled",
			"description": "Returns true if gravity is enabled on this Actor",
			"authority": "both",
			"return": [
				{
					"type": "boolean",
					"name": "gravity_enabled"
				}
			]
		},
		{
			"name": "IsInWater",
			"description": "Returns true if this Actor is in water",
			"authority": "both",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"name": "IsNetworkDistributed",
			"description": "Returns true if this Actor is currently network distributed",
			"description_long": "Returns true if this Actor is currently network distributed. Only actors being network distributed can have their network authority set<br>Entities have NetworkDistributed automatically disabled when: Attached, Possessed, Grabbed, Picked Up or Driving",
			"authority": "both",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"name": "GetAttachedEntities",
			"description": "Gets all Actors attached to this Actor",
			"authority": "both",
			"return": [
				{
					"type": "Actor[]"
				}
			]
		},
		{
			"name": "GetAttachedTo",
			"description": "Gets the Actor this Actor is attached to",
			"authority": "both",
			"return": [
				{
					"type": "Actor?"
				}
			]
		},
		{
			"name": "GetBounds",
			"description": "Gets this Actor's bounds",
			"authority": "client",
			"return": [
				{
					"type": "table",
					"table_properties": [
						{
							"name": "Origin",
							"type": "Vector"
						},
						{
							"name": "BoxExtent",
							"type": "Vector"
						},
						{
							"name": "SphereRadius",
							"type": "float"
						}
					]
				}
			]
		},
		{
			"name": "GetCollision",
			"description": "Gets this Actor's collision type",
			"authority": "both",
			"return": [
				{
					"type": "CollisionType",
					"name": "collision_type"
				}
			]
		},
		{
			"name": "GetLocation",
			"description": "Gets this Actor's location in the game world",
			"authority": "both",
			"return": [
				{
					"type": "Vector",
					"name": "location"
				}
			]
		},
		{
			"name": "GetRelativeLocation",
			"description": "Gets this Actor's Relative Location if it's attached",
			"authority": "both",
			"return": [
				{
					"type": "Vector",
					"name": "relative_location"
				}
			]
		},
		{
			"name": "GetNetworkAuthority",
			"description": "Gets this Actor's Network Authority Player",
			"authority": "server",
			"return": [
				{
					"type": "Player?"
				}
			]
		},
		{
			"name": "GetRotation",
			"description": "Gets this Actor's angle in the game world",
			"authority": "both",
			"return": [
				{
					"type": "Rotator",
					"name": "rotation"
				}
			]
		},
		{
			"name": "GetRelativeRotation",
			"description": "Gets this Actor's Relative Rotation if it's attached",
			"authority": "both",
			"return": [
				{
					"type": "Rotator",
					"name": "relative_rotation"
				}
			]
		},
		{
			"name": "GetForce",
			"description": "Gets this Actor's force (set by <code>SetForce()</code>)",
			"authority": "both",
			"return": [
				{
					"type": "Vector",
					"name": "force"
				}
			]
		},
		{
			"name": "GetDimension",
			"description": "Gets this Actor's dimension",
			"authority": "both",
			"return": [
				{
					"type": "integer",
					"name": "dimension"
				}
			],
			"relations": {
				"events": [
					"DimensionChange"
				]
			}
		},
		{
			"name": "HasNetworkAuthority",
			"description": "Returns true if the local Player is currently the Network Authority of this Actor",
			"authority": "client",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"name": "HasAuthority",
			"description": "Gets if this Actor was spawned by the client side",
			"authority": "client",
			"return": [
				{
					"type": "boolean",
					"description": "false if it was spawned by the Server or true if it was spawned by the client"
				}
			]
		},
		{
			"name": "GetScale",
			"description": "Gets this Actor's scale",
			"authority": "both",
			"return": [
				{
					"type": "Vector",
					"name": "scale"
				}
			]
		},
		{
			"name": "GetVelocity",
			"description": "Gets this Actor's current velocity",
			"authority": "both",
			"return": [
				{
					"type": "Vector",
					"name": "velocity"
				}
			]
		},
		{
			"name": "AddActorTag",
			"description": "Adds an Unreal Actor Tag to this Actor",
			"authority": "client",
			"parameters": [
				{
					"type": "string",
					"name": "tag"
				}
			],
			"relations": {
				"functions": [
					"RemoveActorTag",
					"GetActorTags"
				]
			}
		},
		{
			"name": "RemoveActorTag",
			"description": "Removes an Unreal Actor Tag from this Actor",
			"authority": "client",
			"parameters": [
				{
					"type": "string",
					"name": "tag"
				}
			],
			"relations": {
				"functions": [
					"AddActorTag",
					"GetActorTags"
				]
			}
		},
		{
			"name": "GetActorTags",
			"description": "Gets all Unreal Actor Tags on this Actor",
			"authority": "client",
			"return": [
				{
					"type": "string[]"
				}
			],
			"relations": {
				"functions": [
					"AddActorTag",
					"RemoveActorTag"
				]
			}
		},
		{
			"name": "WasRecentlyRendered",
			"description": "Gets if this Actor was recently rendered on screen",
			"authority": "client",
			"return": [
				{
					"type": "boolean"
				}
			]
		},
		{
			"name": "GetDistanceFromCamera",
			"description": "Gets the distance of this Actor from the Camera",
			"authority": "client",
			"return": [
				{
					"type": "float"
				}
			]
		},
		{
			"name": "GetScreenPercentage",
			"description": "Gets the percentage of this Actor size in the screen",
			"authority": "client",
			"return": [
				{
					"type": "float"
				}
			]
		}
	],
	"events": [
		{
			"authority": "server",
			"name": "DimensionChange",
			"description": "Triggered when an Actor changes it's dimension",
			"arguments": [
				{
					"name": "self",
					"type": "Actor"
				},
				{
					"name": "old_dimension",
					"type": "integer"
				},
				{
					"name": "new_dimension",
					"type": "integer"
				}
			],
			"relations": {
				"functions": [
					"SetDimension",
					"GetDimension"
				]
			}
		}
	]
}
