{
	"name": "Vector",
	"description": "A Vector composed of components (X, Y, Z) with floating point precision. Used mainly for entity position.",
	"operators": [
		{
			"name": "+",
			"operator": "__add",
			"lhs": "Vector|number",
			"rhs": "Vector|number",
			"return": "Vector"
		},
		{
			"name": "-",
			"operator": "__sub",
			"lhs": "Vector|number",
			"rhs": "Vector|number",
			"return": "Vector"
		},
		{
			"name": "*",
			"operator": "__mul",
			"lhs": "Vector|number",
			"rhs": "Vector|number",
			"return": "Vector"
		},
		{
			"name": "/",
			"operator": "__div",
			"lhs": "Vector",
			"rhs": "Vector|number",
			"return": "Vector"
		},
		{
			"name": "^",
			"operator": "__pow",
			"lhs": "Vector",
			"rhs": "Vector|number",
			"return": "Vector"
		}
	],
	"constructors": [
		{
			"name": "Default Constructor",
			"parameters": [
				{
					"name": "X",
					"type": "number",
					"default": "0",
					"description": "X Coordinate"
				},
				{
					"name": "Y",
					"type": "number",
					"default": "X",
					"description": "Y Coordinate"
				},
				{
					"name": "Z",
					"type": "number",
					"default": "X",
					"description": "Z Coordinate"
				}
			]
		}
	],
	"properties": [
		{
			"name": "X",
			"type": "number",
			"description": "X Coordinate"
		},
		{
			"name": "Y",
			"type": "number",
			"description": "Y Coordinate"
		},
		{
			"name": "Z",
			"type": "number",
			"description": "Z Coordinate"
		}
	],
	"functions": [
		{
			"name": "Equals",
			"description": "Check against another vector for equality, within specified error limits",
			"description_long": "Check if the vector is equal to another vector, within specified error limits",
			"return": [
				{
					"type": "boolean",
					"description": "Are the vectors equal or not"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "other",
					"description": "The vector to compare to"
				},
				{
					"type": "number",
					"name": "tolerance",
					"default": "0.000001",
					"description": "The error limits"
				}
			]
		},
		{
			"name": "Distance",
			"description": "Distance between two points",
			"description_long": "Returns the distance of 2 vectors",
			"return": [
				{
					"type": "number",
					"description": "The distance betweem the vectors"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "other",
					"description": "The vector to get the distance to"
				}
			]
		},
		{
			"name": "DistanceSquared",
			"description": "Squared distance between two points",
			"description_long": "Return the squared distance of 2 vectors",
			"return": [
				{
					"type": "number",
					"description": "The squared distance betweem the vectors"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "other",
					"description": "The vector to get the squared distance to"
				}
			]
		},
		{
			"name": "GetUnsafeNormal",
			"description": "Calculates normalized version of vector without checking for zero length",
			"description_long": "Returns the normalized version of vector without checking for zero length",
			"return": [
				{
					"type": "Vector",
					"description": "The unsafe normal"
				}
			],
			"parameters": []
		},
		{
			"name": "GetSafeNormal",
			"description": "Gets a normalized copy of the vector, checking it is safe to do so based on the length",
			"description_long": "Returns a normalized copy of the vector, checking it is safe to do so based on the length",
			"return": [
				{
					"type": "Vector",
					"description": "The safe normal"
				}
			],
			"parameters": []
		},
		{
			"name": "IsNear",
			"description": "Efficiently checks whether vector is near to another vector within a specified radius",
			"return": [
				{
					"type": "boolean",
					"description": "If the vector is near to the other vector"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "other",
					"description": "The vector to compare to"
				},
				{
					"type": "number",
					"name": "radius",
					"description": "The radius to check"
				}
			]
		},
		{
			"name": "IsNearlyZero",
			"description": "Checks whether vector is near to zero within a specified tolerance",
			"return": [
				{
					"type": "boolean",
					"description": "If the bool is near to zero"
				}
			],
			"parameters": [
				{
					"type": "number",
					"name": "tolerance",
					"default": "0.000001",
					"description": "The error limits"
				}
			]
		},
		{
			"name": "IsZero",
			"description": "Checks whether all components of the vector are exactly zero",
			"return": [
				{
					"type": "boolean",
					"description": "If all components of the vector are exactly zero"
				}
			]
		},
		{
			"name": "Normalize",
			"description": "Normalize this vector in-place if it is larger than a given tolerance. Leaves it unchanged if not",
			"return": [
				{
					"type": "boolean",
					"description": "If the vector has been modified"
				}
			]
		},
		{
			"name": "Size",
			"description": "Get the length (magnitude) of this vector",
			"return": [
				{
					"type": "number",
					"description": "The lenght of the vector"
				}
			]
		},
		{
			"name": "SizeSquared",
			"description": "Get the squared length of this vector",
			"return": [
				{
					"type": "number",
					"description": "The squared length of the vector"
				}
			]
		},
		{
			"name": "Rotation",
			"description": "Returns the orientation corresponding to the direction in which the vector points",
			"return": [
				{
					"type": "Rotator",
					"description": "The orientation of the vector"
				}
			]
		},
		{
			"name": "Dot",
			"description": "Dot product of two vectors",
			"description_long": "Returns the dot product between this vector and another vector",
			"return": [
				{
					"type": "number",
					"description": "the dot product"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "other",
					"description": "The vector to dot with"
				}
			]
		},
		{
			"name": "Cross",
			"description": "Cross product of two vectors",
			"description_long": "Returns the cross product between this vector and another vector",
			"return": [
				{
					"type": "Vector",
					"description": "the cross product vector"
				}
			],
			"parameters": [
				{
					"type": "Vector",
					"name": "other",
					"description": "The vector to cross with"
				}
			]
		}
	]
}
